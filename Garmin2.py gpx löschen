import streamlit as st
import gpxpy
import folium
from streamlit_folium import st_folium
from geopy.distance import geodesic

def calculate_distance_and_speed(gpx):
    total_distance = 0.0  # in kilometers
    total_time = 0.0  # in seconds

    for track in gpx.tracks:
        for segment in track.segments:
            segment_distance = 0.0
            segment_time = 0.0
            for i in range(1, len(segment.points)):
                point1 = segment.points[i - 1]
                point2 = segment.points[i]
                segment_distance += geodesic((point1.latitude, point1.longitude), (point2.latitude, point2.longitude)).km
                segment_time += (point2.time - point1.time).total_seconds()

            total_distance += segment_distance
            total_time += segment_time

    # Convert total time from seconds to hours, minutes, seconds
    total_time_hours = total_time / 3600
    hours = int(total_time_hours)
    minutes = int((total_time_hours * 60) % 60)
    seconds = int(total_time_hours * 3600 % 60)

    average_speed = total_distance / total_time_hours if total_time_hours > 0 else 0.0  # in km/h

    return total_distance, average_speed, f"{hours:02}:{minutes:02}:{seconds:02}"

def folium_plot(gpx, tiles="OpenStreetMap", color="orange", start_stop_colors=("green", "red"),
                way_points_color="blue", minimap=True, coord_popup=False, title="Innsbruck-Runde",
                zoom=8, file_path=None, open_in_browser=False):
    """
    Plot the GPX data on a Folium map.

    Args:
        gpx: Parsed GPX data.
        tiles (str): Map tiles.
        color (str): Line color for the route.
        start_stop_colors (tuple): Colors for the start and stop markers.
        way_points_color (str): Color for the waypoints.
        minimap (bool): Show a minimap.
        coord_popup (bool): Show a popup with coordinates when clicking on the map.
        title (str): Title of the map.
        zoom (int): Initial zoom level.
        file_path (str): Path to save the map as an HTML file.
        open_in_browser (bool): Open the map in a new browser tab.
    """
    start_coords = [gpx.tracks[0].segments[0].points[0].latitude, gpx.tracks[0].segments[0].points[0].longitude]
    m = folium.Map(location=start_coords, zoom_start=zoom, tiles=tiles)

    for track in gpx.tracks:
        for segment in track.segments:
            points = [(point.latitude, point.longitude) for point in segment.points]
            folium.PolyLine(points, color=color, weight=2.5, opacity=1).add_to(m)

            # Add start and stop markers
            folium.Marker(points[0], icon=folium.Icon(color=start_stop_colors[0]), popup="Start").add_to(m)
            folium.Marker(points[-1], icon=folium.Icon(color=start_stop_colors[1]), popup="End").add_to(m)

    if minimap:
        minimap = folium.plugins.MiniMap(toggle_display=True)
        m.add_child(minimap)

    if coord_popup:
        m.add_child(folium.LatLngPopup())

    if file_path:
        m.save(file_path)

    if open_in_browser:
        import webbrowser
        webbrowser.open(file_path)

    return m

def main():
    st.title("GPX File Uploader")

    # GPX Datei hochladen
    uploaded_file = st.file_uploader("Upload your GPX file", type="gpx")

    if uploaded_file is not None:
        # GPX Datei lesen
        gpx = gpxpy.parse(uploaded_file)

        # Distanz, Geschwindigkeit und Dauer berechnen
        total_distance, average_speed, total_duration = calculate_distance_and_speed(gpx)
        st.write(f"Total Distance: {total_distance:.2f} km")
        st.write(f"Average Speed: {average_speed:.2f} km/h")
        st.write(f"Total Duration: {total_duration}")

        # Karte mit zus√§tzlichen Optionen plotten
        m = folium_plot(gpx, tiles="OpenStreetMap", color="blue", start_stop_colors=("green", "red"),
                        way_points_color="blue", minimap=True, coord_popup=False,
                        zoom=8)

        # Karte in Streamlit anzeigen
        st_folium(m, width=700, height=500)

if __name__ == "__main__":
    main()

